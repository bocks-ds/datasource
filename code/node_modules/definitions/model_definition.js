const helpers = require('helpers')
const parser = require('database/parser');

class ModelDefinitionString {
    constructor(model_name) {
        this.table_name = helpers.getTableByModel(model_name) // Don't let associative tables pre-write bad info
        this.defString = this.build_def(model_name, parser.table_structures[this.table_name])
        env.logger.debug(1, `Created definition [${this.table_name}] with model [${model_name}]`)
    }

    output() {
        return this.defString
    }


    build_def(name, data) {
        env.logger.debug(2, `Building ${name} definition...`)
        let def = `type ${name} {\n`
        let typeDef = this.append_types(def, data, name)
        return typeDef + `}\n`
    }


    append_types(def, columns, name) {
        let column_names = Object.keys(columns)
        column_names.forEach((column) => {
        let output = this.gql_type(column, columns[column], name)
        env.logger.debug(4, "Appending to", name, `'${output}'`)
        def = `${def}  ${output}\n`
        })
        def = this.check_relational_tables(name, def)
        return def
    }


    gql_type(column, type, parent) {
        if (column.includes('id'))
        return this.gql_id_type(column, parent)
        if (type.includes('string'))
        return `${column}: String`
        if (type.includes('number'))
        return `${column}: Int`
        return `${column}: ${type}`
    }


    gql_id_type(column, parent) {
        // Returns
        //    A string of 'key: value' based on what type of 'id' reference was found
        if (column.includes('_id')) {
            let name = column.replace('_id', '')
            if (name.includes('parent')) {
                // If a table has a 'parent_id' column, it is referencing its own table
                let parent_model = helpers.getModelName(parent)
                env.logger.debug(4, `└─ Setting ${column} to reference parent model: ${parent_model}`)
                return `parent: ${parent_model || parent}`
            }
            return `${name}: ${helpers.getModelName(name)}`
        }
        return `${column}: ID`
    }

    check_relational_tables(name, def) {
        // Add relational table as list of target models
        if (this.table_name in env.supportedTables) {
            let relational_sources = env.supportedTables[this.table_name]
            relational_sources.forEach((source) => {
                let resolver_name = helpers.getModelName(source)
                if (env.associativeTables[source].relationshipType == 'OneToMany') {
                    // if Many to Many, source model must directly reference associative table by id
                    let output = `${source}: [${resolver_name}]`
                    def = `${def}  ${output}\n`
                }
            })
        }
        return def
    }
}

module.exports = ModelDefinitionString