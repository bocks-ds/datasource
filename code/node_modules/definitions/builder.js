// relying on inverting key by value is dangerous while some keys share values (feat, modifier, descriptor)

const fs = require('fs')
const glob = require('glob')
const path = require('path');

const json_data = require('database/json_parser');
const QueryDefinitionString = require('definitions/query_definition')
const ModelDefinitionString = require('definitions/model_definition')
const env = require('env_vars');
const helpers = require('helpers')


class DefinitionsBuilder {

  constructor() {
    env.logger.setDebugLevels("definitions") // Set debugLevel!
    env.logger.info("Compiling typeDefs...")

    this.identify_relational_tables()
    let custom_defs = this.build_model_defs()
    let queryDefs = this.build_query_defs()
    this.typeDefs = `${queryDefs}\n\n${custom_defs}`

    env.logger.debug_precise(-616, this.typeDefs)
    env.logger.info("Finished compiling typeDefs.")
    env.logger.resetDebugLevels() // Reset debugLevel!
  }


  get_type_defs() {
    return this.typeDefs
  }


  identify_relational_tables() {
    env.logger.debug(1, "Identifying relational tables...")
    env.logger.debug(3, "Table Relationships:")

    this.set_associative_supported_tables()

    env.logger.debug(1, "Supported tables & their supporters:")
    env.logger.debug(1, env.supportedTables)
  }


  set_associative_supported_tables() {
    Object.keys(env.associativeTables).forEach((support_table) => {
      let association = env.associativeTables[support_table]
      association.supported_tables.forEach((table) => {
        env.supportedTables[table] = env.supportedTables[table] || new Set()
        env.supportedTables[table].add(support_table)
        env.logger.debug(3, "└─ ", table, "is supported by", support_table)
      })
    })
  }


  build_query_defs() {
    env.logger.debug(2, "Building root query definition...")
    this.indent = '  '
    let defs = 'type Query {\n'
    let tables = Object.keys(json_data.table_structures)
    tables.forEach((name) => {
      env.logger.debug(3, `Adding root definition entry for ${name}...`)
      let defString = new QueryDefinitionString(name).output()
      defs = `${defs}\n  ${defString}\n`
    })
    return defs + '}'
  }



  build_model_defs() {
    env.logger.debug(1, "Building model definitions...")
    this.indent = ''
    let defs = ''
    Object.keys(json_data.table_structures).forEach((table) => {
      let model_name = helpers.getModelName(table)
      if(!defs.includes(`type ${model_name} {`)) {
        let defString = new ModelDefinitionString(model_name).output()
        defs = `${defs}\n${defString}`
      }
    })
    return defs
  }

}


// Encapsulation was functionally necessary here
defBuilder = new DefinitionsBuilder()
module.exports = defBuilder.get_type_defs() 