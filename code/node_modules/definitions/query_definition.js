const helpers = require('helpers')
const json_data = require('database/json_parser');

class QueryDefinitionString {

    constructor(name) {
        let keys = this.set_key_string(name)
        let model_name = helpers.getModelName(name)
        this.defString = `${name}${keys}: [${model_name}]`
    }

    output(){
        return this.defString
    }

    set_key_string(name) {
        /*  Reads table structure for query to get search keys
            Returns
            -------
                string - gql formatted string of search keys, or empty string
        */
        let columns = json_data.table_structures[name]
        let column_names = Object.keys(columns)
        env.logger.debug(4, `  └─ Available columns to add as keys for ${name}: ${column_names}`)
        let output = '('
        column_names.forEach((column) => {
            output = this.append_column_keys(column, columns[column], output)
        })
        output = output + ')'
        if (output.length > 2) {
            env.logger.debug(4, `    └─ Created query keys ${output} for '${name}' definition.`)
            return output
        }
        return ''
    }

    append_column_keys(column, value, output) {
        /*  Reads column content to determin column type
            Returns
            -------
                output - Same as value from parameter, but appended with new column data
        */
        env.logger.debug(4,`     └─ Appending '${value}' to ${column} keys`)
        if (column == 'id' || value == 'ID') {
            output = `${output} ${column}: ID`
        } else if (column.includes('_id')) {
            output = this.append_relational_def_key(output, column)
        } else if(value.includes('tring')) {
            output = this.append_string_def_key(output, column)
        } else if (['Int', 'number'].includes(value)) {
            output = this.append_number_def_key(output, column)
        }
        return output
    }

    append_number_def_key(output, column) {
        let exact = `${column}: Int`
        let min = `${column}_min: Int`
        let max = `${column}_max: Int`
        let equals =  `${column}_equals: Int`
        return `${output} ${exact} ${min} ${max} ${equals}`
    }

    append_relational_def_key(output, column) {
        let name = column.replace('_id', '')
        if (name == 'parent')
            return output
        return `${output} ${column}: ID`
    }

    append_string_def_key(output, column) {
        let exact = `${column}: String`
        let like = `${column}_like: String`
        return `${output} ${exact} ${like}`
    }
}

module.exports = QueryDefinitionString