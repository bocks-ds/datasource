const helpers = require('helpers')
const json_data = require('database/json_parser');

class QueryDefinitionString {

    constructor(name) {
        let keys = this.set_key_string(name)
        let model_name = helpers.getModelName(name)
        this.defString = `${name}${keys}: [${model_name}]`
    }

    output(){
        return this.defString
    }

    set_key_string(name) {
        let columns = json_data.table_structures[name]
        let column_names = Object.keys(columns)
        env.logger.debug(4, `  └─ Available columns to add as keys for ${name}: ${column_names}`)
        let output = '('
        column_names.forEach((column) => {
        output = this.append_column_keys(column, columns[column], output)
        })
        output = output + ')'
        if (output.length > 2) {
        env.logger.debug(4, `    └─ Created query keys ${output} for '${name}' definition.`)
        return output
        }
        return ''
    }

    append_column_keys(column, value, output) {
        /*  Reads column content to determin column type
            Returns
            -------
                output - Same as value from parameter, but appended with new column data
        */
        env.logger.debug(4,`     └─ Appending '${value}' to ${column} keys`)
        if (['ID', 'String', 'Int'].includes(value)) {
        // No transform needed
        output = `${output}${column}: ${value} `
        } else if(value.includes('string')) {
        output = this.append_string_def_key(output, column)
        } else if (value.includes('_id')) {
        let name = value.replace('_id', 'id')
        let model = helpers.getModelName(name)
        let table = helpers.getTableByModel(model)
        output = `${output}${name}: ${table} `
        } else if (value.includes('id') || value.includes('number')) {
        output = `${output}${column}: Int `
        }
        return output
    }

    append_string_def_key(output, column) {
        output = `${output}${column}: String `
        return output
    }
}

module.exports = QueryDefinitionString