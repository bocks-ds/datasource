const { DataSource } = require('apollo-datasource');
const { Op } = require("sequelize");

const env = require("env_vars");


class SqliteDatasource extends DataSource {

    constructor(db_instance) {
        super()
        this.database = db_instance.db
        this.models = db_instance.models
    }

    initialize(config) {
        this.context = config.context;
    }

    _run_complex_query(table, query) {
        let find = { where: query }
        env.logger.debug(0, "Querying", table, "for", query)
        return this.models[table].findAll(find).then(
            response => { return response })
    }

    findAll(table) {
        return this.models[table].findAll()
    }

    _get_like(table, column, value) {
        let query = {[Op.like]: value}
        this._run_complex_query(table, column, query)
    }

    _get_betwen(table, column, values) {
        let query = {[Op.between]: values}
        return this._run_complex_query(table, column, query)
    }

    _get_over(table, column, value) {
        let query = {[Op.gt]: value}
        return this._run_complex_query(table, column, query)
    }

    _get_under(table, column, value) {
        let query = {
            [Op.or]: {
              [Op.lt]: value,
              [Op.eq]: null
            }
        }
        return this._run_complex_query(table, column, query)
    }

    _get_by(table, column, value) {
        let query = { where: {} }
        query.where[column] = value
        return this.models[table].findOne(query)
    }

    get_by_id(table, id) {
        return this._get_by(table, "id", id)
    }

    get_by_name(table, name) {
        return this._get_by(table, "name", name)
    }
}

module.exports = SqliteDatasource