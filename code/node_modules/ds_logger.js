const { v4: uuidv4 } = require('uuid');

class DSLogger {
    currentDebugger = ''

    console_map = {
        log: console.log,
        debug: console.debug,
        error: console.error
    }


    constructor(globalDebugLevel, subDebugLevels, precise) {
        this.globalDebugLevel = (globalDebugLevel != undefined ? globalDebugLevel : 0) // int
        this.subDebugLevels = (subDebugLevels != undefined ? subDebugLevels : null) // dict
        this.precise = precise // bool

        this.debugLevel = parseInt(this.globalDebugLevel) // clone int without reference
    }

    new_log_id() {
        if (this.debugLevel > 0)
            return uuidv4()
        return null
    }

    _output(type, level, args, message='', slicer=1) {
        var additional_args = Array.prototype.slice.call(args, 0).slice(slicer).join(' ')
        let prefix = (this.currentDebugger || 'core') + ` Lv${level}`
        let padding = ''
        if (prefix.length < 16){
            padding = ' '.repeat((15 - prefix.length))
        }
        this.console_map[type](`${prefix}${padding} | ${message}${additional_args}`)
    }


    setDebugLevels(type) {
        if(this.subDebugLevels && this.subDebugLevels[type])
            this.debugLevel = this.subDebugLevels[type]
        else
            this.debugLevel = this.globalDebugLevel
        this.currentDebugger = type
    }


    resetDebugLevels() {
        this.debugLevel = this.globalDebugLevel
        this.currentDebugger = ''
    }

    info() {
        this._output('log', 0, arguments, '', 0)
    }

    error() {
        this._output('error', 0, arguments, 'ERROR: ', 0)
    }

    debug(level) {
        if (this.precise)
            this.debug_precise(level, arguments)
        else if (this.debugLevel >= level) { 
            this._output('debug', level, arguments)
        }
    }

    debug_precise(level) {
        if (this.debugLevel == level) { 
            this._output('debug', level, arguments)
        }
    }
}

module.exports = DSLogger
