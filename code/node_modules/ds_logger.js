
class DSLogger {
    currentDebugger = ''

    console_map = {
        log: console.log,
        debug: console.debug
    }


    constructor(globalDebugLevel, subDebugLevels, precise) {
        this.globalDebugLevel = (globalDebugLevel != undefined ? globalDebugLevel : 0) // int
        this.subDebugLevels = (subDebugLevels != undefined ? subDebugLevels : null) // dict
        this.precise = precise // bool

        this.debugLevel = parseInt(this.globalDebugLevel) // clone int without reference
    }


    _output(type, level, message, args) {
        var additional_args = Array.prototype.slice.call(args, 0).slice(2).join(' ')
        let prefix = `${this.currentDebugger || 'core' } Lv${level} | `
        this.console_map[type](prefix, message, additional_args)
    }


    setDebugLevels(type) {
        if(this.subDebugLevels && this.subDebugLevels[type])
            this.debugLevel = this.subDebugLevels[type]
        this.currentDebugger = type
    }


    resetDebugLevels() {
        this.debugLevel = this.globalDebugLevel
        this.currentDebugger = ''
    }


    info(message) {
        this._output('log', 0, message, ['', ...arguments])
    }


    debug(level, message) {
        if (this.precise)
            this.debug_precise(level, message, arguments)
        else if (this.debugLevel >= level) { 
            this._output('debug', level, message, arguments)
        }
    }


    debug_precise(level, message, args) {
        if (this.debugLevel == level) { 
            this._output('debug', level, message, args || arguments)
        }
    }
}

class DatasourceError extends Error {

}

module.exports = {
    DSLogger: DSLogger,
    DatasourceError: DatasourceError,
}
