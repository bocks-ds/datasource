
const env = require('env_vars')
const parser = require('database/parser');
const helpers = require('helpers')
const { ManyRelationalResolver, DirectQueryResolver } = require('resolvers/resolvers')

class ResolversBuilder {

    constructor() {
        env.logger.setDebugLevels("resolvers")
        env.logger.info("Compiling resolvers...")

        let resolvers = {
            Query: this.create_query_resolvers()
        }

        resolvers = this.append_relational_resolvers(resolvers)

        env.logger.debug_precise(-616, "Resolvers Created:", Object.keys(resolvers).join(' ')) // Optionally print all resolvers
        env.logger.info("Finished compiling resolvers.")
        env.logger.resetDebugLevels()
        return resolvers
    }

    create_query_resolvers() {
    /*  Creates a query resolver for every structure created in parser
        Returns
        -------
            query_resolvers - Base resolvers object, may be extended subsequently
    */
        let query_resolvers = {}
        let def_names = Object.keys(parser.table_structures)
        def_names.forEach((def_name, _) => {

            env.logger.debug(2, "Building resolver for:", def_name)

            query_resolvers[def_name] = (_, args, __, ___) => {
                let conn = helpers.newConnection()
                if (args) {
                    env.logger.debug(1, "Arguments found:", args)
                    return queryBySearchArgs(def_name, args)
                }

                env.logger.debug(1, "Simple Query:", def_name)

                return conn.findAll(def_name);
            }
        })
        return query_resolvers
    }


    append_relational_resolvers(resolvers) {
    /*  This attempts to add a resolver entry for every supporting table/model.
        Returns
        -------
            resolvers - Same as value from parameter, but with new entries for
                        all support tables (both one-to-many and many-to-many)
    */
        Object.keys(env.supportedTables).forEach((supported_table_name, _) => {
            // Create method within resolver for each support table
            env.supportedTables[supported_table_name].forEach((table_name, _) => {
                let model_name = env.tableSingulars[supported_table_name]

                resolvers[model_name] = resolvers[model_name] || {} // Creates dict if not existing
                if (env.associativeTables[table_name].direct)
                    resolvers = new DirectQueryResolver(resolvers, model_name, table_name)
                else if (table_name == supported_table_name)
                    resolvers = new DirectQueryResolver(resolvers, model_name, table_name, true)
                else
                    resolvers = new ManyRelationalResolver(resolvers, table_name, model_name, supported_table_name)
            })
        })
        return resolvers
    }

}


module.exports = ResolversBuilder
