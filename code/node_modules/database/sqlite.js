const { DataSource } = require('apollo-datasource');
const { Op } = require("sequelize");

const env = require("env_vars");


class SqliteDatasource extends DataSource {

    constructor(db_instance) {
        super()
        this.database = db_instance.db
        this.models = db_instance.models
    }

    _run_complex_query(table, query) {
    /*  Generalized find-all-where function
    */
        env.logger.setDebugLevels("database") 
        env.logger.debug(1, "Querying", table, "for", JSON.stringify(query))
        env.logger.resetDebugLevels()

        let find = { where: query }
        return this.models[table].findAll(find).then(
            response => { return response })
    }

    findAll(table) {
    /*  Query database for all results from provided table name
        Returns
        -------
            list - all rows from table
    */
        env.logger.setDebugLevels("database") 
        env.logger.debug(1, "Selecting all rows for ", table)
        env.logger.resetDebugLevels()

        return this.models[table].findAll()
    }

    get_string_queries(args) {
    /*  Split provided args on spaces or commas into multiple like statements
        Returns
        -------
            query - Sequelize query ready to drop into a "where" object
    */
        let query = {}
        Object.keys(args).forEach((arg) => {
            if (typeof args[arg] != 'string')
                throw TypeError(`'${args[arg]}' is not a string`)

            let values = args[arg].split(' ').join(',').split(',')
            let and_query = []
            values.forEach((value) => {
                and_query.push({[Op.like]: `%${value}%`})
            })
            query[arg] = { [Op.and]: and_query }
        })
        return query
    }

    get_betwen(table, column, values) {
        let query = {[Op.between]: values}
        return this._run_complex_query(table, column, query)
    }

    get_over(table, column, value) {
        let query = {[Op.gt]: value}
        return this._run_complex_query(table, column, query)
    }

    get_under(table, column, value) {
        let query = {
            [Op.or]: {
              [Op.lt]: value,
              [Op.eq]: null
            }
        }
        return this._run_complex_query(table, column, query)
    }

    _get_by(table, column, value) {
        let query = { where: {} }
        query.where[column] = value
        return this.models[table].findOne(query)
    }

    get_by_id(table, id) {
        return this._get_by(table, "id", id)
    }

    get_by_name(table, name) {
        return this._get_by(table, "name", name)
    }
}

module.exports = SqliteDatasource